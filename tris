def tri_insertion(lst):
    """trie les valeurs données dans l ordre croissant"""
    for i in range(1, len(lst)):
        cle = lst[i]
        k = i - 1
        while  k >= 0 and lst[k] > cle:
            lst[k + 1] = lst[k]
            k -= 1
        lst[k + 1] = cle
    return lst

def tri_insertion2(lst):
    """trie les valeurs données dans l ordre croissant"""
    for i in range(1, len(lst)):
        k = i
        while k > 0 and lst[k-1] > lst[k] :
            lst[k], lst[k-1] = lst[k-1], lst[k]   
            k = k - 1
    return(lst)
            
def tri_selection(lst):
    for i in range(len(lst) - 1):
        indice_min = i
        for k in range(i + 1, len(lst)):
            if lst[k] < lst[indice_min]:
                indice_min = k
        lst[i], lst[indice_min] = lst[indice_min], lst[i]
    return(lst)

def interclassement(lst1, lst2): #pour le tri fusion
    lst_total = []
    while len(lst1) > 0 and len(lst2) > 0:
        if lst1[0] < lst2[0]:
            lst_total.append(lst1[0])
            lst1.remove(lst1[0])
        else:
            lst_total.append(lst2[0])
            lst2.remove(lst2[0])
    return lst_total + lst1 + lst2

def tri_fusion(lst):
    if len(lst) == 1:
        return lst
    m = len(lst)//2
    return interclassement(tri_fusion(lst[:m]), tri_fusion(lst[m:]))
